
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 12:18:46 CET 2012
//----------------------------------------------------

package org.gen;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import org.gen.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 12:18:46 CET 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\016\004\000\002\016\003\000\002\017\005" +
    "\000\002\022\004\000\002\022\006\000\002\021\004\000" +
    "\002\021\003\000\002\020\006\000\002\007\004\000\002" +
    "\007\003\000\002\013\004\000\002\013\004\000\002\031" +
    "\011\000\002\031\007\000\002\033\002\000\002\012\007" +
    "\000\002\012\003\000\002\024\005\000\002\024\003\000" +
    "\002\023\005\000\002\032\004\000\002\032\002\000\002" +
    "\026\004\000\002\026\003\000\002\025\006\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\010\000\002\002\005\000\002\002\003\000" +
    "\002\011\004\000\002\011\003\000\002\010\011\000\002" +
    "\010\007\000\002\010\007\000\002\010\006\000\002\010" +
    "\007\000\002\010\006\000\002\010\005\000\002\014\007" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\006\005\000\002" +
    "\006\003\000\002\027\005\000\002\030\011\000\002\030" +
    "\007\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\006\000\002\004\006\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\005\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\010\057\014\060\007\066\012\001\002\000" +
    "\010\002\uffff\057\014\060\007\001\002\000\010\057\ufffd" +
    "\060\ufffd\066\ufffd\001\002\000\010\057\014\060\007\066" +
    "\012\001\002\000\004\066\012\001\002\000\004\050\234" +
    "\001\002\000\004\002\233\001\002\000\110\002\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\025\uffb2\026\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\066\uffb2\001\002\000\022\004\054\013\050\017\057\022" +
    "\051\023\052\025\053\040\060\066\012\001\002\000\004" +
    "\066\012\001\002\000\010\002\ufff5\057\ufff5\060\ufff5\001" +
    "\002\000\004\011\017\001\002\000\004\066\012\001\002" +
    "\000\004\010\046\001\002\000\006\005\uffec\012\uffec\001" +
    "\002\000\006\005\023\012\024\001\002\000\004\066\012" +
    "\001\002\000\004\010\025\001\002\000\020\031\027\033" +
    "\032\061\026\062\034\063\031\064\035\066\012\001\002" +
    "\000\026\004\uffe5\005\uffe5\012\uffe5\013\uffe5\017\uffe5\022" +
    "\uffe5\023\uffe5\025\uffe5\040\uffe5\066\uffe5\001\002\000\004" +
    "\015\040\001\002\000\026\004\uffdf\005\uffdf\012\uffdf\013" +
    "\uffdf\017\uffdf\022\uffdf\023\uffdf\025\uffdf\040\uffdf\066\uffdf" +
    "\001\002\000\026\004\uffe2\005\uffe2\012\uffe2\013\uffe2\017" +
    "\uffe2\022\uffe2\023\uffe2\025\uffe2\040\uffe2\066\uffe2\001\002" +
    "\000\004\032\036\001\002\000\022\004\ufff2\013\ufff2\017" +
    "\ufff2\022\ufff2\023\ufff2\025\ufff2\040\ufff2\066\ufff2\001\002" +
    "\000\026\004\uffe4\005\uffe4\012\uffe4\013\uffe4\017\uffe4\022" +
    "\uffe4\023\uffe4\025\uffe4\040\uffe4\066\uffe4\001\002\000\026" +
    "\004\uffe3\005\uffe3\012\uffe3\013\uffe3\017\uffe3\022\uffe3\023" +
    "\uffe3\025\uffe3\040\uffe3\066\uffe3\001\002\000\020\031\027" +
    "\033\032\061\026\062\034\063\031\064\035\066\012\001" +
    "\002\000\026\004\uffe0\005\uffe0\012\uffe0\013\uffe0\017\uffe0" +
    "\022\uffe0\023\uffe0\025\uffe0\040\uffe0\066\uffe0\001\002\000" +
    "\004\067\041\001\002\000\004\016\042\001\002\000\004" +
    "\032\043\001\002\000\020\031\027\033\032\061\026\062" +
    "\034\063\031\064\035\066\012\001\002\000\026\004\uffe1" +
    "\005\uffe1\012\uffe1\013\uffe1\017\uffe1\022\uffe1\023\uffe1\025" +
    "\uffe1\040\uffe1\066\uffe1\001\002\000\006\005\uffed\012\uffed" +
    "\001\002\000\020\031\027\033\032\061\026\062\034\063" +
    "\031\064\035\066\012\001\002\000\006\005\uffeb\012\uffeb" +
    "\001\002\000\016\017\ufff0\022\ufff0\023\ufff0\025\ufff0\040" +
    "\ufff0\066\ufff0\001\002\000\004\011\214\001\002\000\020" +
    "\013\050\017\057\022\051\023\052\025\053\040\060\066" +
    "\012\001\002\000\004\066\012\001\002\000\010\002\ufff3" +
    "\057\ufff3\060\ufff3\001\002\000\010\002\ufff4\057\ufff4\060" +
    "\ufff4\001\002\000\004\041\167\001\002\000\004\011\161" +
    "\001\002\000\024\011\071\013\063\053\062\066\012\067" +
    "\064\070\074\071\067\072\066\073\065\001\002\000\030" +
    "\002\uffee\014\uffee\017\uffee\021\uffee\022\uffee\023\uffee\025" +
    "\uffee\040\uffee\057\uffee\060\uffee\066\uffee\001\002\000\024" +
    "\011\071\013\063\053\062\066\012\067\064\070\074\071" +
    "\067\072\066\073\065\001\002\000\004\011\143\001\002" +
    "\000\074\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\012" +
    "\uffba\014\uffba\016\uffba\017\uffba\021\uffba\022\uffba\023\uffba" +
    "\025\uffba\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\066\uffba\001\002\000\074\002" +
    "\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\012\uffb4\014\uffb4" +
    "\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\040" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\066\uffb4\001\002\000\074\002\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\012\uffb7\014\uffb7\016\uffb7\017" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7\040\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\066\uffb7\001\002\000\074\002\uffb8\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\012\uffb8\014\uffb8\016\uffb8\017\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\025\uffb8\040\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\066\uffb8\001" +
    "\002\000\074\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\012\uffb3\014\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\025\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\066\uffb3\001\002\000\024" +
    "\011\071\013\063\053\062\066\012\067\064\070\074\071" +
    "\067\072\066\073\065\001\002\000\100\002\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\011\130\012\uffb5\014\uffb5\015" +
    "\131\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5" +
    "\040\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\066\uffb5\001\002\000\036\004\077\006" +
    "\107\042\075\043\112\044\111\045\106\046\104\047\100" +
    "\050\102\051\110\052\103\053\076\055\101\056\105\001" +
    "\002\000\074\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\012\uffb9\014\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\025\uffb9\040\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\066\uffb9\001\002\000\024" +
    "\011\071\013\063\053\062\066\012\067\064\070\074\071" +
    "\067\072\066\073\065\001\002\000\024\011\071\013\063" +
    "\053\062\066\012\067\064\070\074\071\067\072\066\073" +
    "\065\001\002\000\030\002\uffd6\014\uffd6\017\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\025\uffd6\040\uffd6\057\uffd6\060\uffd6\066" +
    "\uffd6\001\002\000\024\011\071\013\063\053\062\066\012" +
    "\067\064\070\074\071\067\072\066\073\065\001\002\000" +
    "\024\011\071\013\063\053\062\066\012\067\064\070\074" +
    "\071\067\072\066\073\065\001\002\000\024\011\071\013" +
    "\063\053\062\066\012\067\064\070\074\071\067\072\066" +
    "\073\065\001\002\000\024\011\071\013\063\053\062\066" +
    "\012\067\064\070\074\071\067\072\066\073\065\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\067\072\066\073\065\001\002\000\024\011\071" +
    "\013\063\053\062\066\012\067\064\070\074\071\067\072" +
    "\066\073\065\001\002\000\024\011\071\013\063\053\062" +
    "\066\012\067\064\070\074\071\067\072\066\073\065\001" +
    "\002\000\004\066\012\001\002\000\024\011\071\013\063" +
    "\053\062\066\012\067\064\070\074\071\067\072\066\073" +
    "\065\001\002\000\024\011\071\013\063\053\062\066\012" +
    "\067\064\070\074\071\067\072\066\073\065\001\002\000" +
    "\024\011\071\013\063\053\062\066\012\067\064\070\074" +
    "\071\067\072\066\073\065\001\002\000\074\002\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\012\uffc9\014\uffc9\016\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\040\uffc9\042" +
    "\uffc9\043\uffc9\044\111\045\106\046\104\047\100\050\102" +
    "\051\110\052\103\053\076\055\101\056\105\057\uffc9\060" +
    "\uffc9\066\uffc9\001\002\000\074\002\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\025\uffc8\040\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\103\053\076\055\101\056\105\057\uffc8\060\uffc8\066\uffc8" +
    "\001\002\000\074\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\012\uffc3\014\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\025\uffc3\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\103\053\076" +
    "\055\101\056\105\057\uffc3\060\uffc3\066\uffc3\001\002\000" +
    "\074\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\012\uffbb" +
    "\014\uffbb\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\025" +
    "\uffbb\040\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\066\uffbb\001\002\000\074\002\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\012\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\040\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\103\053\076\055\101\056\105\057\uffc7" +
    "\060\uffc7\066\uffc7\001\002\000\074\002\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\012\uffbf\014\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\025\uffbf\040\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\066" +
    "\uffbf\001\002\000\074\002\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\012\uffc6\014\uffc6\016\uffc6\017\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\025\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\103\053" +
    "\076\055\101\056\105\057\uffc6\060\uffc6\066\uffc6\001\002" +
    "\000\074\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\012" +
    "\uffc2\014\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\025\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\101" +
    "\056\105\057\uffc2\060\uffc2\066\uffc2\001\002\000\074\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\012\uffc4\014\uffc4" +
    "\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\040" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\103\053\076\055\101\056\105\057" +
    "\uffc4\060\uffc4\066\uffc4\001\002\000\074\002\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\012\uffc0\014\uffc0\016\uffc0\017" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0\040\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\066\uffc0\001\002\000\074\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\012\uffc5\014\uffc5\016\uffc5\017\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\025\uffc5\040\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\103" +
    "\053\076\055\101\056\105\057\uffc5\060\uffc5\066\uffc5\001" +
    "\002\000\074\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\012\uffc1\014\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\025\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\055" +
    "\101\056\105\057\uffc1\060\uffc1\066\uffc1\001\002\000\074" +
    "\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca\012\uffca\014" +
    "\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca\025\uffca" +
    "\040\uffca\042\uffca\043\112\044\111\045\106\046\104\047" +
    "\100\050\102\051\110\052\103\053\076\055\101\056\105" +
    "\057\uffca\060\uffca\066\uffca\001\002\000\024\011\071\013" +
    "\063\053\062\066\012\067\064\070\074\071\067\072\066" +
    "\073\065\001\002\000\024\011\071\013\063\053\062\066" +
    "\012\067\064\070\074\071\067\072\066\073\065\001\002" +
    "\000\036\006\107\016\133\042\075\043\112\044\111\045" +
    "\106\046\104\047\100\050\102\051\110\052\103\053\076" +
    "\055\101\056\105\001\002\000\074\002\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\012\uffbc\014\uffbc\016\uffbc\017\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\025\uffbc\040\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\066" +
    "\uffbc\001\002\000\006\005\136\012\137\001\002\000\042" +
    "\005\uffd0\006\107\012\uffd0\014\uffd0\042\075\043\112\044" +
    "\111\045\106\046\104\047\100\050\102\051\110\052\103" +
    "\053\076\055\101\056\105\001\002\000\024\011\071\013" +
    "\063\053\062\066\012\067\064\070\074\071\067\072\066" +
    "\073\065\001\002\000\074\002\uffbd\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\012\uffbd\014\uffbd\016\uffbd\017\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\025\uffbd\040\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\066\uffbd\001" +
    "\002\000\044\005\uffd1\006\107\012\uffd1\014\uffd1\016\uffd1" +
    "\042\075\043\112\044\111\045\106\046\104\047\100\050" +
    "\102\051\110\052\103\053\076\055\101\056\105\001\002" +
    "\000\036\006\107\012\142\042\075\043\112\044\111\045" +
    "\106\046\104\047\100\050\102\051\110\052\103\053\076" +
    "\055\101\056\105\001\002\000\074\002\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\012\uffb6\014\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\025\uffb6\040\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\066" +
    "\uffb6\001\002\000\024\011\071\013\063\053\062\066\012" +
    "\067\064\070\074\071\067\072\066\073\065\001\002\000" +
    "\006\005\145\014\146\001\002\000\004\011\147\001\002" +
    "\000\074\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\025\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\066\uffcd\001\002\000\024\011" +
    "\071\013\063\053\062\066\012\067\064\070\074\071\067" +
    "\072\066\073\065\001\002\000\036\005\151\006\107\042" +
    "\075\043\112\044\111\045\106\046\104\047\100\050\102" +
    "\051\110\052\103\053\076\055\101\056\105\001\002\000" +
    "\024\011\071\013\063\053\062\066\012\067\064\070\074" +
    "\071\067\072\066\073\065\001\002\000\036\006\107\012" +
    "\153\042\075\043\112\044\111\045\106\046\104\047\100" +
    "\050\102\051\110\052\103\053\076\055\101\056\105\001" +
    "\002\000\006\005\uffcc\014\uffcc\001\002\000\036\005\155" +
    "\006\107\042\075\043\112\044\111\045\106\046\104\047" +
    "\100\050\102\051\110\052\103\053\076\055\101\056\105" +
    "\001\002\000\024\011\071\013\063\053\062\066\012\067" +
    "\064\070\074\071\067\072\066\073\065\001\002\000\036" +
    "\006\107\012\157\042\075\043\112\044\111\045\106\046" +
    "\104\047\100\050\102\051\110\052\103\053\076\055\101" +
    "\056\105\001\002\000\006\005\uffcb\014\uffcb\001\002\000" +
    "\074\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\012\uffbe" +
    "\014\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\025" +
    "\uffbe\040\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\066\uffbe\001\002\000\024\011\071" +
    "\013\063\053\062\066\012\067\064\070\074\071\067\072" +
    "\066\073\065\001\002\000\036\006\107\012\163\042\075" +
    "\043\112\044\111\045\106\046\104\047\100\050\102\051" +
    "\110\052\103\053\076\055\101\056\105\001\002\000\020" +
    "\013\050\017\057\022\051\023\052\025\053\040\060\066" +
    "\012\001\002\000\030\002\uffdb\014\uffdb\017\uffdb\021\165" +
    "\022\uffdb\023\uffdb\025\uffdb\040\uffdb\057\uffdb\060\uffdb\066" +
    "\uffdb\001\002\000\020\013\050\017\057\022\051\023\052" +
    "\025\053\040\060\066\012\001\002\000\030\002\uffdc\014" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\025\uffdc\040\uffdc" +
    "\057\uffdc\060\uffdc\066\uffdc\001\002\000\024\011\071\013" +
    "\063\053\062\066\012\067\064\070\074\071\067\072\066" +
    "\073\065\001\002\000\036\004\171\006\107\042\075\043" +
    "\112\044\111\045\106\046\104\047\100\050\102\051\110" +
    "\052\103\053\076\055\101\056\105\001\002\000\030\002" +
    "\uffd7\014\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7" +
    "\040\uffd7\057\uffd7\060\uffd7\066\uffd7\001\002\000\004\026" +
    "\173\001\002\000\010\013\174\015\177\066\012\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\067\072\066\073\065\001\002\000\020\013\050" +
    "\017\057\022\051\023\052\025\053\040\060\066\012\001" +
    "\002\000\020\013\uffd2\017\uffd2\022\uffd2\023\uffd2\025\uffd2" +
    "\040\uffd2\066\uffd2\001\002\000\024\011\071\013\063\053" +
    "\062\066\012\067\064\070\074\071\067\072\066\073\065" +
    "\001\002\000\006\005\136\016\205\001\002\000\042\005" +
    "\uffd0\006\107\007\202\016\uffd0\042\075\043\112\044\111" +
    "\045\106\046\104\047\100\050\102\051\110\052\103\053" +
    "\076\055\101\056\105\001\002\000\024\011\071\013\063" +
    "\053\062\066\012\067\064\070\074\071\067\072\066\073" +
    "\065\001\002\000\036\006\107\016\204\042\075\043\112" +
    "\044\111\045\106\046\104\047\100\050\102\051\110\052" +
    "\103\053\076\055\101\056\105\001\002\000\020\013\uffd5" +
    "\017\uffd5\022\uffd5\023\uffd5\025\uffd5\040\uffd5\066\uffd5\001" +
    "\002\000\020\013\uffd4\017\uffd4\022\uffd4\023\uffd4\025\uffd4" +
    "\040\uffd4\066\uffd4\001\002\000\030\002\uffd8\014\uffd8\017" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\040\uffd8\057\uffd8" +
    "\060\uffd8\066\uffd8\001\002\000\006\005\136\014\210\001" +
    "\002\000\020\013\uffd3\017\uffd3\022\uffd3\023\uffd3\025\uffd3" +
    "\040\uffd3\066\uffd3\001\002\000\004\022\212\001\002\000" +
    "\024\011\071\013\063\053\062\066\012\067\064\070\074" +
    "\071\067\072\066\073\065\001\002\000\062\002\uffd9\006" +
    "\107\014\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9" +
    "\040\uffd9\042\075\043\112\044\111\045\106\046\104\047" +
    "\100\050\102\051\110\052\103\053\076\055\101\056\105" +
    "\057\uffd9\060\uffd9\066\uffd9\001\002\000\024\011\071\013" +
    "\063\053\062\066\012\067\064\070\074\071\067\072\066" +
    "\073\065\001\002\000\036\006\107\012\216\042\075\043" +
    "\112\044\111\045\106\046\104\047\100\050\102\051\110" +
    "\052\103\053\076\055\101\056\105\001\002\000\020\013" +
    "\050\017\057\022\051\023\052\025\053\040\060\066\012" +
    "\001\002\000\030\002\uffda\014\uffda\017\uffda\021\uffda\022" +
    "\uffda\023\uffda\025\uffda\040\uffda\057\uffda\060\uffda\066\uffda" +
    "\001\002\000\016\017\uffe9\022\uffe9\023\uffe9\025\uffe9\040" +
    "\uffe9\066\uffe9\001\002\000\016\017\057\022\051\023\052" +
    "\025\053\040\060\066\012\001\002\000\020\014\232\017" +
    "\057\022\051\023\052\025\053\040\060\066\012\001\002" +
    "\000\006\010\226\041\167\001\002\000\016\017\uffea\022" +
    "\uffea\023\uffea\025\uffea\040\uffea\066\uffea\001\002\000\020" +
    "\014\uffdd\017\uffdd\022\uffdd\023\uffdd\025\uffdd\040\uffdd\066" +
    "\uffdd\001\002\000\020\031\027\033\032\061\026\062\034" +
    "\063\031\064\035\066\012\001\002\000\004\004\230\001" +
    "\002\000\016\017\uffe6\022\uffe6\023\uffe6\025\uffe6\040\uffe6" +
    "\066\uffe6\001\002\000\020\014\uffde\017\uffde\022\uffde\023" +
    "\uffde\025\uffde\040\uffde\066\uffde\001\002\000\030\002\uffef" +
    "\014\uffef\017\uffef\021\uffef\022\uffef\023\uffef\025\uffef\040" +
    "\uffef\057\uffef\060\uffef\066\uffef\001\002\000\004\002\000" +
    "\001\002\000\026\011\071\013\063\036\236\053\062\066" +
    "\012\067\064\070\074\071\067\072\066\073\065\001\002" +
    "\000\010\057\ufffc\060\ufffc\066\ufffc\001\002\000\004\013" +
    "\241\001\002\000\036\004\240\006\107\042\075\043\112" +
    "\044\111\045\106\046\104\047\100\050\102\051\110\052" +
    "\103\053\076\055\101\056\105\001\002\000\010\057\ufffb" +
    "\060\ufffb\066\ufffb\001\002\000\004\066\012\001\002\000" +
    "\006\014\ufff8\066\ufff8\001\002\000\006\014\251\066\012" +
    "\001\002\000\004\010\245\001\002\000\020\031\027\033" +
    "\032\061\026\062\034\063\031\064\035\066\012\001\002" +
    "\000\004\004\247\001\002\000\006\014\ufff7\066\ufff7\001" +
    "\002\000\006\014\ufff9\066\ufff9\001\002\000\010\057\ufffa" +
    "\060\ufffa\066\ufffa\001\002\000\004\011\253\001\002\000" +
    "\004\066\012\001\002\000\006\005\023\012\255\001\002" +
    "\000\022\004\ufff1\013\ufff1\017\ufff1\022\ufff1\023\ufff1\025" +
    "\ufff1\040\ufff1\066\ufff1\001\002\000\010\002\001\057\014" +
    "\060\007\001\002\000\010\057\ufffe\060\ufffe\066\ufffe\001" +
    "\002\000\010\002\ufff6\057\ufff6\060\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\020\003\010\005\007\007\003\013\014\016" +
    "\005\017\004\031\012\001\001\000\006\013\257\031\012" +
    "\001\001\000\002\001\001\000\014\005\007\007\255\013" +
    "\014\017\256\031\012\001\001\000\004\005\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\055\010\060\012\054\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\017\023\020\024\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\017\023\044\001" +
    "\001\000\002\001\001\000\006\002\032\005\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\036\005\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\043\005\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\046\005\027" +
    "\001\001\000\002\001\001\000\004\033\217\001\001\000" +
    "\002\001\001\000\010\005\055\010\060\012\210\001\001" +
    "\000\004\005\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\072" +
    "\005\071\027\067\001\001\000\002\001\001\000\010\004" +
    "\157\005\071\027\067\001\001\000\004\030\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\140\005\071" +
    "\027\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\126\005\071\027\067\001\001" +
    "\000\010\004\125\005\071\027\067\001\001\000\002\001" +
    "\001\000\010\004\124\005\071\027\067\001\001\000\010" +
    "\004\123\005\071\027\067\001\001\000\010\004\122\005" +
    "\071\027\067\001\001\000\010\004\121\005\071\027\067" +
    "\001\001\000\010\004\120\005\071\027\067\001\001\000" +
    "\010\004\117\005\071\027\067\001\001\000\010\004\116" +
    "\005\071\027\067\001\001\000\004\005\115\001\001\000" +
    "\010\004\114\005\071\027\067\001\001\000\010\004\113" +
    "\005\071\027\067\001\001\000\010\004\112\005\071\027" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\134\005\071\015\133\027\067" +
    "\001\001\000\010\004\131\005\071\027\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\137\005\071\027\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\153\005\071\027\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\147\005\071\027\067\001\001\000\002\001\001\000" +
    "\010\004\151\005\071\027\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\155\005" +
    "\071\027\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\161\005\071\027\067\001" +
    "\001\000\002\001\001\000\010\005\055\010\060\012\163" +
    "\001\001\000\002\001\001\000\010\005\055\010\060\012" +
    "\165\001\001\000\002\001\001\000\010\004\167\005\071" +
    "\027\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\175\014\174\001\001\000\012" +
    "\004\134\005\071\015\206\027\067\001\001\000\010\005" +
    "\055\010\060\012\205\001\001\000\002\001\001\000\012" +
    "\004\200\005\071\015\177\027\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\202\005\071\027\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\212\005\071\027\067\001" +
    "\001\000\002\001\001\000\010\004\214\005\071\027\067" +
    "\001\001\000\002\001\001\000\010\005\055\010\060\012" +
    "\216\001\001\000\002\001\001\000\004\032\220\001\001" +
    "\000\012\005\222\010\224\011\221\025\223\001\001\000" +
    "\006\005\055\010\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\226\005\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\236\005" +
    "\071\022\234\027\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\243\020\241\021\242\001\001\000\002\001\001\000\006" +
    "\005\243\020\247\001\001\000\002\001\001\000\006\002" +
    "\245\005\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\017\023\020\024\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\257\031\012\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ident ::= IDENTIFIER 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.IDENT, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= map_of 
            {
              AST RESULT =null;
		 RESULT = new AST(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= BOOL 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.BOOLEAN, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= ident 
            {
              AST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= LPAR expr RPAR 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= CHAREXP 
            {
              AST RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.CHAR, ch, new Type(EnumType.CHAR)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= STRINGEXP 
            {
              AST RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.STRING, st, new Type(EnumType.STRING)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= FLOATING 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.FLOATING, f, new Type(EnumType.FLOAT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= INTEGER 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.INTEGER, i, new Type(EnumType.INT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr DOT ident 
            {
              AST RESULT =null;
		 RESULT = new AST(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= ident LBRACKET expr RBRACKET 
            {
              AST RESULT =null;
		 RESULT = new AST(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= ident LPAR list RPAR 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= MINUS expr 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST(e, null, EnumTag.MINUS_U); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr DIV expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr MULT expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.MULT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr MINUS expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr PLUS expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.PLUS, e1.getType()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr DIFF expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.DIFF); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr EQ expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr GE expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr LE expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr GT expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr LT expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr OR expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr AND expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // map_of_list ::= LPAR expr COMMA expr RPAR 
            {
              AST RESULT =null;
		 RESULT = new AST(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_of_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // map_of_list ::= map_of_list COMMA LPAR expr COMMA expr RPAR 
            {
              AST RESULT =null;
		 RESULT = new AST(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_of_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // map_of ::= LBRACE map_of_list RBRACE 
            {
              AST RESULT =null;
		 RESULT = new AST(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_of",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_list ::= expr 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_list ::= expr_list COMMA expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST(e1, e2, EnumTag.EXPRLIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list ::= expr 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list ::= list COMMA expr 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST(l, e, EnumTag.LIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // range ::= ident 
            {
              AST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // range ::= LBRACE list RBRACE 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // range ::= LBRACKET list RBRACKET 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // range ::= LBRACKET expr DDOT expr RBRACKET 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST(e1, e2, EnumTag.RANGE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr ::= RETURN expr SEMIC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instr ::= ident AFF expr SEMIC 
            {
              AST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Affect(v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instr ::= FOR ident IN range block 
            {
              AST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST r = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Loop(new ForRange(v, r), b, EnumTag.FOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= REPEAT block WHILE expr 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST(e, b, EnumTag.DOWHILE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instr ::= WHILE LPAR expr RPAR block 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Loop(e, b, EnumTag.WHILE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instr ::= IF LPAR expr RPAR block 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, new ThenElse(b, null)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instr ::= IF LPAR expr RPAR block ELSE block 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST b1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, new ThenElse(b1, b2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrs ::= instr 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrs ::= instrs instr 
            {
              AST RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST i1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instructions(i1, i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= ident 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(EnumType.STRUCT, i.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= LIST OF type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(t, null, EnumType.LIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= ARRAY LBRACKET INTEGER RBRACKET OF type 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(t, null, new Integer(i), EnumType.ARRAY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl ::= ident COLON type SEMIC 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclaration(id, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decls ::= decl 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decls ::= decls decl 
            {
              AST RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST ds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDeclarations(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decls_opt ::= 
            {
              AST RESULT =null;
		 RESULT = new OptDeclarations(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls_opt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decls_opt ::= decls_opt decl 
            {
              AST RESULT =null;
		int dcoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dcoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST dco = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OptDeclarations(d, dco); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls_opt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= ident COLON type 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameter(id, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // params ::= param 
            {
              AST RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // params ::= params COMMA param 
            {
              AST RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST ps = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameters(p, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= instr 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= LBRACE NT$0 decls_opt instrs RBRACE 
            {
              AST RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AST) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST ds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Main.currentEnv = Main.currentEnv.getPrev();
      if(Main.DEBUG)
			  System.out.println("Closing environment");
		  RESULT = new Block(ds, i);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              AST RESULT =null;

			Env n = new Env(Main.currentEnv);
      if(Main.DEBUG) 
			  System.out.println("Creating new environment 	" + n.getNum());
			if (Main.firstEnv == null) {
	      Main.firstEnv = Main.currentEnv = n;
			} else {
				Main.currentEnv.putNext(n);
				Main.currentEnv = n;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fheader ::= PROCEDURE ident LPAR params RPAR 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Header(i, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fheader",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fheader ::= FUNCTION ident LPAR params RPAR COLON type 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Header(i, p, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fheader",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcDef ::= fheader SEMIC 
            {
              AST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST h = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new Function(h, null);
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcDef ::= fheader block 
            {
              AST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST h = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = new Function(h, b);
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcs ::= funcDef 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcs ::= funcs funcDef 
            {
              AST RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST fs = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST(f, fs, EnumTag.FUNCTIONS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // struct_decl ::= ident COLON type SEMIC 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarStructDeclaration(id, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // struct_decls ::= struct_decl 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // struct_decls ::= struct_decls struct_decl 
            {
              AST RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST ds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarStructDeclarations(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= STRUCT LBRACE struct_decls RBRACE 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= expr SEMIC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // globalDec ::= ident EQ definition 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GlobalDeclaration(i, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalDec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globalDecs ::= globalDec 
            {
              AST RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST g = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = g; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalDecs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalDecs ::= globalDecs globalDec 
            {
              AST RESULT =null;
		int gdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST gds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST g = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GlobalDeclarations(gds, g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalDecs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= funcs 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(null, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= globalDecs funcs 
            {
              AST RESULT =null;
		int gdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST gds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST fs = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(gds, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

