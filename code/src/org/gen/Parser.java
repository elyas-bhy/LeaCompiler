
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 28 12:11:48 CET 2012
//----------------------------------------------------

package org.gen;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 28 12:11:48 CET 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\017\004\000\002\017\003\000\002\020\005" +
    "\000\002\023\004\000\002\023\006\000\002\022\004\000" +
    "\002\022\003\000\002\021\006\000\002\006\004\000\002" +
    "\006\003\000\002\014\004\000\002\014\004\000\002\034" +
    "\011\000\002\034\007\000\002\036\002\000\002\013\007" +
    "\000\002\013\003\000\002\024\003\000\002\024\002\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\035\004\000\002\035\002\000\002\027\006\000\002\027" +
    "\010\000\002\033\007\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\005\000\002\002\005\000\002\002\003\000\002" +
    "\010\004\000\002\010\003\000\002\007\011\000\002\007" +
    "\007\000\002\007\007\000\002\007\011\000\002\007\007" +
    "\000\002\007\006\000\002\007\005\000\002\007\007\000" +
    "\002\015\007\000\002\015\005\000\002\015\005\000\002" +
    "\015\003\000\002\016\003\000\002\016\002\000\002\011" +
    "\005\000\002\011\003\000\002\030\005\000\002\031\005" +
    "\000\002\031\003\000\002\032\007\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\006\000" +
    "\002\004\006\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\003" +
    "\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\010\057\014\060\007\066\012\001\002\000" +
    "\010\002\uffff\057\014\060\007\001\002\000\010\057\ufffd" +
    "\060\ufffd\066\ufffd\001\002\000\010\057\014\060\007\066" +
    "\012\001\002\000\004\066\012\001\002\000\004\050\252" +
    "\001\002\000\004\002\251\001\002\000\100\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\022\uffae\023\uffae\025" +
    "\uffae\026\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\055\uffae\056\uffae\066\uffae\001\002\000\022\004\054" +
    "\013\047\017\057\022\050\023\051\025\052\040\060\066" +
    "\012\001\002\000\004\066\012\001\002\000\010\002\ufff5" +
    "\057\ufff5\060\ufff5\001\002\000\004\011\017\001\002\000" +
    "\006\012\uffec\066\012\001\002\000\006\005\045\012\uffed" +
    "\001\002\000\004\012\042\001\002\000\004\010\024\001" +
    "\002\000\006\005\uffea\012\uffea\001\002\000\022\027\030" +
    "\031\027\033\026\061\025\062\035\063\032\064\034\066" +
    "\012\001\002\000\026\004\uffe3\005\uffe3\012\uffe3\013\uffe3" +
    "\017\uffe3\022\uffe3\023\uffe3\025\uffe3\040\uffe3\066\uffe3\001" +
    "\002\000\004\032\040\001\002\000\004\032\036\001\002" +
    "\000\026\004\uffdf\005\uffdf\012\uffdf\013\uffdf\017\uffdf\022" +
    "\uffdf\023\uffdf\025\uffdf\040\uffdf\066\uffdf\001\002\000\026" +
    "\004\uffdc\005\uffdc\012\uffdc\013\uffdc\017\uffdc\022\uffdc\023" +
    "\uffdc\025\uffdc\040\uffdc\066\uffdc\001\002\000\026\004\uffe0" +
    "\005\uffe0\012\uffe0\013\uffe0\017\uffe0\022\uffe0\023\uffe0\025" +
    "\uffe0\040\uffe0\066\uffe0\001\002\000\006\005\uffe9\012\uffe9" +
    "\001\002\000\026\004\uffe1\005\uffe1\012\uffe1\013\uffe1\017" +
    "\uffe1\022\uffe1\023\uffe1\025\uffe1\040\uffe1\066\uffe1\001\002" +
    "\000\026\004\uffe2\005\uffe2\012\uffe2\013\uffe2\017\uffe2\022" +
    "\uffe2\023\uffe2\025\uffe2\040\uffe2\066\uffe2\001\002\000\022" +
    "\027\030\031\027\033\026\061\025\062\035\063\032\064" +
    "\034\066\012\001\002\000\026\004\uffde\005\uffde\012\uffde" +
    "\013\uffde\017\uffde\022\uffde\023\uffde\025\uffde\040\uffde\066" +
    "\uffde\001\002\000\022\027\030\031\027\033\026\061\025" +
    "\062\035\063\032\064\034\066\012\001\002\000\026\004" +
    "\uffdd\005\uffdd\012\uffdd\013\uffdd\017\uffdd\022\uffdd\023\uffdd" +
    "\025\uffdd\040\uffdd\066\uffdd\001\002\000\004\010\043\001" +
    "\002\000\022\027\030\031\027\033\026\061\025\062\035" +
    "\063\032\064\034\066\012\001\002\000\022\004\ufff2\013" +
    "\ufff2\017\ufff2\022\ufff2\023\ufff2\025\ufff2\040\ufff2\066\ufff2" +
    "\001\002\000\004\066\012\001\002\000\006\005\uffeb\012" +
    "\uffeb\001\002\000\016\017\ufff0\022\ufff0\023\ufff0\025\ufff0" +
    "\040\ufff0\066\ufff0\001\002\000\004\011\221\001\002\000" +
    "\020\013\047\017\057\022\050\023\051\025\052\040\060" +
    "\066\012\001\002\000\004\066\012\001\002\000\010\006" +
    "\132\011\165\041\166\001\002\000\010\002\ufff3\057\ufff3" +
    "\060\ufff3\001\002\000\010\002\ufff4\057\ufff4\060\ufff4\001" +
    "\002\000\074\004\uffac\005\uffac\006\uffac\007\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\022" +
    "\uffac\023\uffac\025\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\055\uffac\056\uffac\066\uffac\001\002\000\004" +
    "\011\157\001\002\000\024\011\071\013\063\053\062\066" +
    "\012\067\064\070\074\071\070\072\067\073\065\001\002" +
    "\000\030\002\uffee\014\uffee\017\uffee\021\uffee\022\uffee\023" +
    "\uffee\025\uffee\040\uffee\057\uffee\060\uffee\066\uffee\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\070\072\067\073\065\001\002\000\004\011\145" +
    "\001\002\000\046\004\uffb6\005\uffb6\007\uffb6\012\uffb6\014" +
    "\uffb6\016\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056" +
    "\uffb6\001\002\000\046\004\uffb0\005\uffb0\007\uffb0\012\uffb0" +
    "\014\uffb0\016\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0" +
    "\056\uffb0\001\002\000\054\004\uffb1\005\uffb1\006\132\007" +
    "\uffb1\011\130\012\uffb1\014\uffb1\015\131\016\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\055\uffb1\056\uffb1\001\002\000\046" +
    "\004\uffb3\005\uffb3\007\uffb3\012\uffb3\014\uffb3\016\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\001\002\000" +
    "\046\004\uffb4\005\uffb4\007\uffb4\012\uffb4\014\uffb4\016\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\070\072\067\073\065\001\002\000\046\004\uffaf" +
    "\005\uffaf\007\uffaf\012\uffaf\014\uffaf\016\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\055\uffaf\056\uffaf\001\002\000\034\004" +
    "\077\042\076\043\111\044\110\045\106\046\104\047\100" +
    "\050\102\051\107\052\103\053\075\055\101\056\105\001" +
    "\002\000\046\004\uffb5\005\uffb5\007\uffb5\012\uffb5\014\uffb5" +
    "\016\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5" +
    "\001\002\000\024\011\071\013\063\053\062\066\012\067" +
    "\064\070\074\071\070\072\067\073\065\001\002\000\024" +
    "\011\071\013\063\053\062\066\012\067\064\070\074\071" +
    "\070\072\067\073\065\001\002\000\030\002\uffd3\014\uffd3" +
    "\017\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\040\uffd3\057" +
    "\uffd3\060\uffd3\066\uffd3\001\002\000\024\011\071\013\063" +
    "\053\062\066\012\067\064\070\074\071\070\072\067\073" +
    "\065\001\002\000\024\011\071\013\063\053\062\066\012" +
    "\067\064\070\074\071\070\072\067\073\065\001\002\000" +
    "\024\011\071\013\063\053\062\066\012\067\064\070\074" +
    "\071\070\072\067\073\065\001\002\000\024\011\071\013" +
    "\063\053\062\066\012\067\064\070\074\071\070\072\067" +
    "\073\065\001\002\000\024\011\071\013\063\053\062\066" +
    "\012\067\064\070\074\071\070\072\067\073\065\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\070\072\067\073\065\001\002\000\024\011\071" +
    "\013\063\053\062\066\012\067\064\070\074\071\070\072" +
    "\067\073\065\001\002\000\024\011\071\013\063\053\062" +
    "\066\012\067\064\070\074\071\070\072\067\073\065\001" +
    "\002\000\024\011\071\013\063\053\062\066\012\067\064" +
    "\070\074\071\070\072\067\073\065\001\002\000\024\011" +
    "\071\013\063\053\062\066\012\067\064\070\074\071\070" +
    "\072\067\073\065\001\002\000\046\004\uffc4\005\uffc4\007" +
    "\uffc4\012\uffc4\014\uffc4\016\uffc4\042\uffc4\043\uffc4\044\110" +
    "\045\106\046\104\047\100\050\102\051\107\052\103\053" +
    "\075\055\101\056\105\001\002\000\046\004\uffc3\005\uffc3" +
    "\007\uffc3\012\uffc3\014\uffc3\016\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\103" +
    "\053\075\055\101\056\105\001\002\000\046\004\uffbe\005" +
    "\uffbe\007\uffbe\012\uffbe\014\uffbe\016\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\103\053\075\055\101\056\105\001\002\000\046\004\uffc2" +
    "\005\uffc2\007\uffc2\012\uffc2\014\uffc2\016\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\103\053\075\055\101\056\105\001\002\000\046\004" +
    "\uffba\005\uffba\007\uffba\012\uffba\014\uffba\016\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\055\uffba\056\uffba\001\002\000\046" +
    "\004\uffc1\005\uffc1\007\uffc1\012\uffc1\014\uffc1\016\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\103\053\075\055\101\056\105\001\002\000" +
    "\046\004\uffbd\005\uffbd\007\uffbd\012\uffbd\014\uffbd\016\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\055\101\056\105\001\002" +
    "\000\046\004\uffbf\005\uffbf\007\uffbf\012\uffbf\014\uffbf\016" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\103\053\075\055\101\056\105\001" +
    "\002\000\046\004\uffbb\005\uffbb\007\uffbb\012\uffbb\014\uffbb" +
    "\016\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb" +
    "\001\002\000\046\004\uffc0\005\uffc0\007\uffc0\012\uffc0\014" +
    "\uffc0\016\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\103\053\075\055\101\056" +
    "\105\001\002\000\046\004\uffc5\005\uffc5\007\uffc5\012\uffc5" +
    "\014\uffc5\016\uffc5\042\uffc5\043\111\044\110\045\106\046" +
    "\104\047\100\050\102\051\107\052\103\053\075\055\101" +
    "\056\105\001\002\000\046\004\uffbc\005\uffbc\007\uffbc\012" +
    "\uffbc\014\uffbc\016\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\055" +
    "\101\056\105\001\002\000\034\012\127\042\076\043\111" +
    "\044\110\045\106\046\104\047\100\050\102\051\107\052" +
    "\103\053\075\055\101\056\105\001\002\000\046\004\uffb2" +
    "\005\uffb2\007\uffb2\012\uffb2\014\uffb2\016\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\055\uffb2\056\uffb2\001\002\000\026\011" +
    "\071\012\uffcc\013\063\053\062\066\012\067\064\070\074" +
    "\071\070\072\067\073\065\001\002\000\024\011\071\013" +
    "\063\053\062\066\012\067\064\070\074\071\070\072\067" +
    "\073\065\001\002\000\004\066\012\001\002\000\074\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\022\uffad\023\uffad\025" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\055" +
    "\uffad\056\uffad\066\uffad\001\002\000\034\016\135\042\076" +
    "\043\111\044\110\045\106\046\104\047\100\050\102\051" +
    "\107\052\103\053\075\055\101\056\105\001\002\000\046" +
    "\004\uffb7\005\uffb7\007\uffb7\012\uffb7\014\uffb7\016\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\001\002\000" +
    "\012\005\142\012\uffcd\014\uffcd\016\uffcd\001\002\000\004" +
    "\012\141\001\002\000\040\005\uffca\012\uffca\014\uffca\042" +
    "\076\043\111\044\110\045\106\046\104\047\100\050\102" +
    "\051\107\052\103\053\075\055\101\056\105\001\002\000" +
    "\046\004\uffb8\005\uffb8\007\uffb8\012\uffb8\014\uffb8\016\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\070\072\067\073\065\001\002\000\042\005\uffcb" +
    "\012\uffcb\014\uffcb\016\uffcb\042\076\043\111\044\110\045" +
    "\106\046\104\047\100\050\102\051\107\052\103\053\075" +
    "\055\101\056\105\001\002\000\006\005\uffc7\014\uffc7\001" +
    "\002\000\024\011\071\013\063\053\062\066\012\067\064" +
    "\070\074\071\070\072\067\073\065\001\002\000\006\005" +
    "\147\014\150\001\002\000\004\011\145\001\002\000\046" +
    "\004\uffc9\005\uffc9\007\uffc9\012\uffc9\014\uffc9\016\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\001\002\000" +
    "\006\005\uffc8\014\uffc8\001\002\000\034\005\153\042\076" +
    "\043\111\044\110\045\106\046\104\047\100\050\102\051" +
    "\107\052\103\053\075\055\101\056\105\001\002\000\024" +
    "\011\071\013\063\053\062\066\012\067\064\070\074\071" +
    "\070\072\067\073\065\001\002\000\034\012\155\042\076" +
    "\043\111\044\110\045\106\046\104\047\100\050\102\051" +
    "\107\052\103\053\075\055\101\056\105\001\002\000\006" +
    "\005\uffc6\014\uffc6\001\002\000\046\004\uffb9\005\uffb9\007" +
    "\uffb9\012\uffb9\014\uffb9\016\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\055\uffb9\056\uffb9\001\002\000\024\011\071\013\063" +
    "\053\062\066\012\067\064\070\074\071\070\072\067\073" +
    "\065\001\002\000\034\012\161\042\076\043\111\044\110" +
    "\045\106\046\104\047\100\050\102\051\107\052\103\053" +
    "\075\055\101\056\105\001\002\000\020\013\047\017\057" +
    "\022\050\023\051\025\052\040\060\066\012\001\002\000" +
    "\030\002\uffd8\014\uffd8\017\uffd8\021\163\022\uffd8\023\uffd8" +
    "\025\uffd8\040\uffd8\057\uffd8\060\uffd8\066\uffd8\001\002\000" +
    "\020\013\047\017\057\022\050\023\051\025\052\040\060" +
    "\066\012\001\002\000\030\002\uffd9\014\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\025\uffd9\040\uffd9\057\uffd9\060\uffd9" +
    "\066\uffd9\001\002\000\026\011\071\012\uffcc\013\063\053" +
    "\062\066\012\067\064\070\074\071\070\072\067\073\065" +
    "\001\002\000\024\011\071\013\063\053\062\066\012\067" +
    "\064\070\074\071\070\072\067\073\065\001\002\000\034" +
    "\004\170\042\076\043\111\044\110\045\106\046\104\047" +
    "\100\050\102\051\107\052\103\053\075\055\101\056\105" +
    "\001\002\000\030\002\uffd4\014\uffd4\017\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\025\uffd4\040\uffd4\057\uffd4\060\uffd4\066\uffd4" +
    "\001\002\000\004\012\172\001\002\000\004\004\173\001" +
    "\002\000\030\002\uffd2\014\uffd2\017\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\025\uffd2\040\uffd2\057\uffd2\060\uffd2\066\uffd2\001" +
    "\002\000\004\026\175\001\002\000\010\013\176\015\201" +
    "\066\012\001\002\000\026\011\071\013\063\014\uffcc\053" +
    "\062\066\012\067\064\070\074\071\070\072\067\073\065" +
    "\001\002\000\020\013\047\017\057\022\050\023\051\025" +
    "\052\040\060\066\012\001\002\000\022\006\132\013\uffce" +
    "\017\uffce\022\uffce\023\uffce\025\uffce\040\uffce\066\uffce\001" +
    "\002\000\026\011\071\013\063\016\uffcc\053\062\066\012" +
    "\067\064\070\074\071\070\072\067\073\065\001\002\000" +
    "\004\016\207\001\002\000\040\005\uffca\007\204\016\uffca" +
    "\042\076\043\111\044\110\045\106\046\104\047\100\050" +
    "\102\051\107\052\103\053\075\055\101\056\105\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\070\072\067\073\065\001\002\000\034\016\206" +
    "\042\076\043\111\044\110\045\106\046\104\047\100\050" +
    "\102\051\107\052\103\053\075\055\101\056\105\001\002" +
    "\000\020\013\uffd1\017\uffd1\022\uffd1\023\uffd1\025\uffd1\040" +
    "\uffd1\066\uffd1\001\002\000\020\013\uffd0\017\uffd0\022\uffd0" +
    "\023\uffd0\025\uffd0\040\uffd0\066\uffd0\001\002\000\030\002" +
    "\uffd5\014\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5" +
    "\040\uffd5\057\uffd5\060\uffd5\066\uffd5\001\002\000\004\014" +
    "\212\001\002\000\020\013\uffcf\017\uffcf\022\uffcf\023\uffcf" +
    "\025\uffcf\040\uffcf\066\uffcf\001\002\000\004\022\214\001" +
    "\002\000\004\011\215\001\002\000\024\011\071\013\063" +
    "\053\062\066\012\067\064\070\074\071\070\072\067\073" +
    "\065\001\002\000\034\012\217\042\076\043\111\044\110" +
    "\045\106\046\104\047\100\050\102\051\107\052\103\053" +
    "\075\055\101\056\105\001\002\000\004\004\220\001\002" +
    "\000\030\002\uffd6\014\uffd6\017\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\025\uffd6\040\uffd6\057\uffd6\060\uffd6\066\uffd6\001\002" +
    "\000\024\011\071\013\063\053\062\066\012\067\064\070" +
    "\074\071\070\072\067\073\065\001\002\000\034\012\223" +
    "\042\076\043\111\044\110\045\106\046\104\047\100\050" +
    "\102\051\107\052\103\053\075\055\101\056\105\001\002" +
    "\000\020\013\047\017\057\022\050\023\051\025\052\040" +
    "\060\066\012\001\002\000\030\002\uffd7\014\uffd7\017\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\025\uffd7\040\uffd7\057\uffd7\060" +
    "\uffd7\066\uffd7\001\002\000\016\017\uffe7\022\uffe7\023\uffe7" +
    "\025\uffe7\040\uffe7\066\uffe7\001\002\000\016\017\057\022" +
    "\050\023\051\025\052\040\060\066\012\001\002\000\020" +
    "\014\250\017\057\022\050\023\051\025\052\040\060\066" +
    "\012\001\002\000\012\006\uffac\010\233\011\uffac\041\uffac" +
    "\001\002\000\016\017\uffe8\022\uffe8\023\uffe8\025\uffe8\040" +
    "\uffe8\066\uffe8\001\002\000\020\014\uffda\017\uffda\022\uffda" +
    "\023\uffda\025\uffda\040\uffda\066\uffda\001\002\000\024\027" +
    "\030\031\027\033\026\035\234\061\025\062\035\063\032" +
    "\064\034\066\012\001\002\000\004\032\237\001\002\000" +
    "\004\004\236\001\002\000\016\017\uffe6\022\uffe6\023\uffe6" +
    "\025\uffe6\040\uffe6\066\uffe6\001\002\000\004\011\240\001" +
    "\002\000\022\027\030\031\027\033\026\061\025\062\035" +
    "\063\032\064\034\066\012\001\002\000\004\004\242\001" +
    "\002\000\016\017\uffe5\022\uffe5\023\uffe5\025\uffe5\040\uffe5" +
    "\066\uffe5\001\002\000\004\005\244\001\002\000\022\027" +
    "\030\031\027\033\026\061\025\062\035\063\032\064\034" +
    "\066\012\001\002\000\004\012\246\001\002\000\004\004" +
    "\uffe4\001\002\000\020\014\uffdb\017\uffdb\022\uffdb\023\uffdb" +
    "\025\uffdb\040\uffdb\066\uffdb\001\002\000\030\002\uffef\014" +
    "\uffef\017\uffef\021\uffef\022\uffef\023\uffef\025\uffef\040\uffef" +
    "\057\uffef\060\uffef\066\uffef\001\002\000\004\002\000\001" +
    "\002\000\026\011\071\013\063\036\254\053\062\066\012" +
    "\067\064\070\074\071\070\072\067\073\065\001\002\000" +
    "\010\057\ufffc\060\ufffc\066\ufffc\001\002\000\004\013\257" +
    "\001\002\000\034\004\256\042\076\043\111\044\110\045" +
    "\106\046\104\047\100\050\102\051\107\052\103\053\075" +
    "\055\101\056\105\001\002\000\010\057\ufffb\060\ufffb\066" +
    "\ufffb\001\002\000\004\066\012\001\002\000\006\014\ufff8" +
    "\066\ufff8\001\002\000\006\014\267\066\012\001\002\000" +
    "\004\010\263\001\002\000\022\027\030\031\027\033\026" +
    "\061\025\062\035\063\032\064\034\066\012\001\002\000" +
    "\004\004\265\001\002\000\006\014\ufff7\066\ufff7\001\002" +
    "\000\006\014\ufff9\066\ufff9\001\002\000\010\057\ufffa\060" +
    "\ufffa\066\ufffa\001\002\000\004\011\271\001\002\000\006" +
    "\012\uffec\066\012\001\002\000\004\012\273\001\002\000" +
    "\022\004\ufff1\013\ufff1\017\ufff1\022\ufff1\023\ufff1\025\ufff1" +
    "\040\ufff1\066\ufff1\001\002\000\010\002\001\057\014\060" +
    "\007\001\002\000\010\057\ufffe\060\ufffe\066\ufffe\001\002" +
    "\000\010\002\ufff6\057\ufff6\060\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\020\003\010\005\007\006\003\014\014\017" +
    "\005\020\004\034\012\001\001\000\006\014\275\034\012" +
    "\001\001\000\002\001\001\000\014\005\007\006\273\014" +
    "\014\020\274\034\012\001\001\000\004\005\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\055\007\060\012\052\013\054\001\001\000\004" +
    "\005\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\021\024\020\025\017\026\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\032\005\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\036\005\030\001" +
    "\001\000\002\001\001\000\006\002\040\005\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\043\005" +
    "\030\001\001\000\002\001\001\000\006\005\021\026\045" +
    "\001\001\000\002\001\001\000\004\036\224\001\001\000" +
    "\002\001\001\000\012\005\055\007\060\012\052\013\212" +
    "\001\001\000\004\005\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\072\005\055\012\065\030\071\001" +
    "\001\000\002\001\001\000\012\004\155\005\055\012\065" +
    "\030\071\001\001\000\006\031\145\032\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\125\005\055\012" +
    "\065\030\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\124\005\055\012\065\030" +
    "\071\001\001\000\012\004\123\005\055\012\065\030\071" +
    "\001\001\000\002\001\001\000\012\004\122\005\055\012" +
    "\065\030\071\001\001\000\012\004\121\005\055\012\065" +
    "\030\071\001\001\000\012\004\120\005\055\012\065\030" +
    "\071\001\001\000\012\004\117\005\055\012\065\030\071" +
    "\001\001\000\012\004\116\005\055\012\065\030\071\001" +
    "\001\000\012\004\115\005\055\012\065\030\071\001\001" +
    "\000\012\004\114\005\055\012\065\030\071\001\001\000" +
    "\012\004\113\005\055\012\065\030\071\001\001\000\012" +
    "\004\112\005\055\012\065\030\071\001\001\000\012\004" +
    "\111\005\055\012\065\030\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\137\005\055\011\135\012\065\016\136\030" +
    "\071\001\001\000\012\004\133\005\055\012\065\030\071" +
    "\001\001\000\004\005\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\142\005\055\012\065\030\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\151\005\055\012\065\030" +
    "\071\001\001\000\002\001\001\000\004\032\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\153\005\055\012\065\030\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\157\005\055\012\065\030\071\001\001\000\002\001\001" +
    "\000\012\005\055\007\060\012\052\013\161\001\001\000" +
    "\002\001\001\000\012\005\055\007\060\012\052\013\163" +
    "\001\001\000\002\001\001\000\016\004\137\005\055\011" +
    "\135\012\065\016\170\030\071\001\001\000\012\004\166" +
    "\005\055\012\065\030\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\055\012\177\015" +
    "\176\001\001\000\016\004\137\005\055\011\135\012\065" +
    "\016\210\030\071\001\001\000\012\005\055\007\060\012" +
    "\052\013\207\001\001\000\002\001\001\000\016\004\202" +
    "\005\055\011\135\012\065\016\201\030\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\204\005\055" +
    "\012\065\030\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\215\005\055\012\065\030\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\221\005\055\012\065\030\071\001\001\000\002\001\001" +
    "\000\012\005\055\007\060\012\052\013\223\001\001\000" +
    "\002\001\001\000\004\035\225\001\001\000\014\005\227" +
    "\007\231\010\226\012\052\027\230\001\001\000\010\005" +
    "\055\007\246\012\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\234\005\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\240\001\001\000\006\002\242\005\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\244\005\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\254\005\055\012\065\023\252\030" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\261\021\257\022" +
    "\260\001\001\000\002\001\001\000\006\005\261\021\265" +
    "\001\001\000\002\001\001\000\006\002\263\005\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\021\024" +
    "\271\025\017\026\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\275\034\012\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static ArrayList<String> errors = new ArrayList<String>();

	/*public String getTokenName(Symbol token) {
		try {
			java.lang.reflect.Field [] classFields = sym.class.getFields();
			for (int i = 0; i < classFields.length; i++) {
				if (classFields[i].getInt(null) == token.sym) {
					return classFields[i].getName();
				}
			}
		} catch (Exception e) {
			e.printStackTrace(System.err);
		}
		return "UNKNOWN TOKEN";
	}*/

	public void syntax_error(Symbol curSymbol) {
		Scanner s = (Scanner) this.getScanner();
		Parser.errors.add(":" + s.yyline() + ":" + s.yycolumn()
				+ ": error: expected \";\" before " + curSymbol.value + " token.");
	}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // identFields ::= ident 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identFields",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // identFields ::= identFields DOT ident 
            {
              AST RESULT =null;
		int idfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST idfs = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldAccess(id, idfs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identFields",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ident ::= IDENTIFIER 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.IDENT, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= map_of 
            {
              AST RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST ml = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ml; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= BOOL 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.BOOLEAN, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= identFields 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= LPAR expr RPAR 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= CHAREXP 
            {
              AST RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.CHAR, ch, new Type(EnumType.CHAR)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= STRINGEXP 
            {
              AST RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.STRING, st, new Type(EnumType.STRING)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= FLOATING 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.FLOATING, f, new Type(EnumType.FLOAT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= INTEGER 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(EnumTag.INTEGER, i, new Type(EnumType.INT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= identFields LBRACKET expr RBRACKET 
            {
              AST RESULT =null;
		 RESULT = new AST(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= identFields LPAR list RPAR 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= MINUS expr 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(null, e, EnumTag.MINUS_U); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr DIV expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr MULT expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.MULT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr MINUS expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr PLUS expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.PLUS, e1.getType()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr DIFF expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.DIFF); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr EQ expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr GE expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr LE expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr GT expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr LT expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr OR expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr AND expr 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(e1, e2, EnumTag.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tuple ::= LPAR expr COMMA expr RPAR 
            {
              AST RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST key = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST val = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Tuple(key, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tuple",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // map_of_list ::= tuple 
            {
              AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST t = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_of_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // map_of_list ::= map_of_list COMMA tuple 
            {
              AST RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST ml = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST t = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MapOf(t, ml); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_of_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // map_of ::= LBRACE map_of_list RBRACE 
            {
              AST RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST ml = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ml; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_of",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_rec ::= expr 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_rec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_rec ::= list_rec COMMA expr 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(l, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_rec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= 
            {
              AST RESULT =null;
		 RESULT = new ExprList(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= list_rec 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // range ::= identFields 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // range ::= LBRACE list RBRACE 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // range ::= LBRACKET list RBRACKET 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // range ::= LBRACKET expr DDOT expr RBRACKET 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST(e1, e2, EnumTag.RANGE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instr ::= identFields LPAR list RPAR SEMIC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ProcedureCall(i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instr ::= RETURN expr SEMIC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instr ::= identFields AFF expr SEMIC 
            {
              AST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Affect(v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instr ::= FOR ident IN range block 
            {
              AST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST r = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Loop(new ForRange(v, r), b, EnumTag.FOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr ::= REPEAT block WHILE LPAR expr RPAR SEMIC 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DoWhile(e, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instr ::= WHILE LPAR expr RPAR block 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Loop(e, b, EnumTag.WHILE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instr ::= IF LPAR expr RPAR block 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, new ThenElse(b, null)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= IF LPAR expr RPAR block ELSE block 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST b1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, new ThenElse(b1, b2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrs ::= instr 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrs ::= instrs instr 
            {
              AST RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST i1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instructions(i1, i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= ident 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(EnumType.STRUCT, i.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= EXPRLIST OF type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(t, null, EnumType.EXPRLIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= ARRAY OF type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(t, null, EnumType.ARRAY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_tuple ::= LPAR type COMMA type RPAR 
            {
              AST RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type key = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type val = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeTuple(key, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_tuple",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl ::= ident COLON MAP OF type_tuple SEMIC 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST tt = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclaration(id, tt, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl ::= ident COLON type SEMIC 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclaration(id, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decls_opt ::= 
            {
              AST RESULT =null;
		 RESULT = new OptDeclarations(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls_opt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decls_opt ::= decls_opt decl 
            {
              AST RESULT =null;
		int dcoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dcoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST dco = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OptDeclarations(d, dco); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls_opt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= ident COLON type 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameter(id, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param_list ::= param 
            {
              AST RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param_list ::= param_list COMMA param 
            {
              AST RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST ps = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameters(p, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameters ::= 
            {
              AST RESULT =null;
		 RESULT = new Parameters(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= param_list 
            {
              AST RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST pl = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= instr 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= LBRACE NT$0 decls_opt instrs RBRACE 
            {
              AST RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AST) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST ds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			if (Main.DEBUG) System.out.println("Closing environment");
      Main.currentEnv = Main.currentEnv.getPrev();
		  RESULT = new Block(ds, i);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              AST RESULT =null;

      Env n = new Env(Main.currentEnv);
      if (Main.DEBUG) System.out.println("Creating new environment  " + n.getNum());
      
      Main.currentEnv.putNext(n);
      Main.currentEnv = n;

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fheader ::= PROCEDURE ident LPAR parameters RPAR 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Header(i, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fheader",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fheader ::= FUNCTION ident LPAR parameters RPAR COLON type 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Header(i, p, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fheader",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcDef ::= fheader SEMIC 
            {
              AST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST h = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Function(h, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcDef ::= fheader block 
            {
              AST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST h = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Function(h, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcs ::= funcDef 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcs ::= funcs funcDef 
            {
              AST RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST fs = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Functions(f, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // struct_decl ::= ident COLON type SEMIC 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST id = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarStructDeclaration(id, null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // struct_decls ::= struct_decl 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // struct_decls ::= struct_decls struct_decl 
            {
              AST RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST ds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarStructDeclarations(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= STRUCT LBRACE struct_decls RBRACE 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= expr SEMIC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // globalDec ::= ident EQ definition 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GlobalDeclaration(i, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalDec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globalDecs ::= globalDec 
            {
              AST RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST g = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = g; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalDecs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalDecs ::= globalDecs globalDec 
            {
              AST RESULT =null;
		int gdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST gds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST g = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GlobalDeclarations(gds, g); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globalDecs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= funcs 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST f = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(null, f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= globalDecs funcs 
            {
              AST RESULT =null;
		int gdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST gds = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST fs = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(gds, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

