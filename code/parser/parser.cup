package org.gen;
 
import org.tree.*;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;

parser code {:

	public static ArrayList<ErrorObject> errors = new ArrayList<ErrorObject>();
  public static AST params;

	/*public String getTokenName(Symbol token) {
		try {
			java.lang.reflect.Field [] classFields = MySymbol.class.getFields();
			for (int i = 0; i < classFields.length; i++) {
				if (classFields[i].getInt(null) == token.sym) {
					return classFields[i].getName();
				}
			}
		} catch (Exception e) {
			e.printStackTrace(System.err);
		}
		return "UNKNOWN TOKEN";
	}*/

	public void syntax_error(Symbol curSymbol) {
		Scanner s = (Scanner) this.getScanner();
		Parser.errors.add(new ErrorObject("expected \";\" before symbol: "
                                      + curSymbol.value));
	}


:}


terminal SEMIC, COMMA, DOT, DDOT, COLON, LPAR, RPAR, LBRACE, RBRACE,
    LBRACKET, RBRACKET, IF, ELSE, WHILE, REPEAT, FOR, IN, BOOLEAN,
    ARRAY, OF, EXPRLIST, MAP, STRUCT, RETURN, AFF, MOD,
    AND, OR, LT, GT, LE, GE, EQ, DIFF, PLUS, MINUS, MINUS_U, MULT, DIV,
    FUNCTION, PROCEDURE, INT, FLOAT, STRING, CHAR;

terminal String IDENTIFIER, INTEGER, FLOATING, STRINGEXP, CHAREXP, BOOL;

non terminal Type type;
non terminal EnumTag bin_op;
non terminal AST program, expr, ident, funcs, instr, instrs, list_rec, identFields,
                 block, funcDef, range, list, globalDecs, globalDec, opt_slot,
                 struct_decl, struct_decls, definition, parameters, param_list, param,
                 decl, map_of, map_of_list, tuple, variable, fheader, decls_opt;


precedence nonassoc ELSE;
precedence nonassoc IF;
precedence right LBRACKET;
precedence left AND, OR;
precedence left LT, GT, LE, GE, EQ, DIFF;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence left MINUS_U;

program ::=
	globalDecs:gds funcs:fs {: RESULT = new Program(gds, fs); :}
	| funcs:f {: RESULT = new Program(null, f); :}
	;

globalDecs ::=
	globalDecs:gds globalDec:g {: RESULT = new GlobalDeclarations(gds, g); :}
	| globalDec:g {: RESULT = g; :}
  ;

globalDec ::=
	ident:i EQ definition:d {: RESULT = new GlobalDeclaration(i, d); :}
	;

definition ::=
	expr:e SEMIC {: RESULT = e; :}
	| STRUCT LBRACE struct_decls:d RBRACE {: RESULT = d; :}
	;

struct_decls ::=
  struct_decls:ds struct_decl:d {: RESULT = new VarStructDeclarations(ds, d); :}
  | struct_decl:d {: RESULT = d; :}
  ;

struct_decl ::=
  ident:id COLON type:t SEMIC
    {: RESULT = new VarStructDeclaration(id, null, t); :}
  ;

funcs ::=
  funcs:fs funcDef:f {: RESULT = new Functions(fs, f); :}
  | funcDef:f {: RESULT = f; :}
  ;

funcDef ::=
  fheader:h block:b 
    {: RESULT = new Function(h, b); :}
  | fheader:h SEMIC
    {: RESULT = new Function(h); :}
  | error
  ;

fheader ::=
  FUNCTION ident:i LPAR parameters:p RPAR COLON type:t
    {: RESULT = new Header(i, p, t); :}
  | PROCEDURE ident:i LPAR parameters:p RPAR
    {: RESULT = new Header(i, p); :}
  ;

block ::=
	LBRACE {:
      Env n = new Env(Main.currentEnv);
      Main.currentEnv.putNext(n);
      Main.currentEnv = n;

      if (Main.currentEnv.getPrev().equals(Main.firstEnv)) {
        Main.functionEnvs.add(Main.currentEnv);
        Main.currentEnv.add(Parser.params);
      }

    :} decls_opt:ds instrs:i RBRACE {:
      Main.currentEnv = Main.currentEnv.getPrev();
		  RESULT = new Block(ds, i);
		:}
	| instr:i
	  {: RESULT = i; :}
	;

parameters ::=
  param_list:pl {: RESULT = pl; :}
  | {: RESULT = new Parameters(null, null); :}
  ;

param_list ::=
  param_list:ps COMMA param:p {: RESULT = new Parameters(ps, p); :}
  | param:p {: RESULT = p; :}
  ;

param ::=
  ident:id COLON type:t {: RESULT = new Parameter(id, null, t); :}
  ;

decls_opt ::=
  decls_opt:dco decl:d
    {: RESULT = new OptDeclarations(dco, d); :}
  | 
    {: RESULT = new OptDeclarations(null, null); :}
  ;

decl ::=
	ident:id COLON type:t SEMIC
		{: RESULT = new VarDeclaration(id, null, t); :}
	;

type ::=
	INT
		{: RESULT = new Type(EnumType.INT); :}
	| FLOAT
		{: RESULT = new Type(EnumType.FLOAT); :}
	| CHAR
		{: RESULT = new Type(EnumType.CHAR); :}
	| STRING
		{: RESULT = new Type(EnumType.STRING); :}
  | BOOLEAN
    {: RESULT = new Type(EnumType.BOOLEAN); :}
	| ARRAY OF type:t
		{: RESULT = new Type(t, null, EnumType.ARRAY); :}
  | MAP OF LPAR type:key COMMA type:val RPAR
    {: RESULT = new Type(key, val, EnumType.MAP); :}
	| EXPRLIST OF type:t
		{: RESULT = new Type(t, null, EnumType.EXPRLIST); :}
  | ident:i
    {: RESULT = new Type(EnumType.STRUCT, i.getName()); :}
	;

instrs ::= 
	instrs:i1 instr:i2
	  {: RESULT = new Instructions(i1, i2); :}
	| instr:i
	  {: RESULT = i; :}
	;

instr ::= 
  IF LPAR expr:e RPAR block:b1 ELSE block:b2
    {: RESULT = new If(e, new ThenElse(b1, b2)); :}
  | IF LPAR expr:e RPAR block:b
    {: RESULT = new If(e, new ThenElse(b, null)); :}
  | WHILE LPAR expr:e RPAR block:b
    {: RESULT = new Loop(e, b, EnumTag.WHILE); :}
  | REPEAT block:b WHILE LPAR expr:e RPAR SEMIC
    {: RESULT = new DoWhile(e, b); :}
  | FOR ident:v IN range:r  {:
      Main.currentEnv.set(v.getName(), r.getLeft().toJava()); :}
    block:b {: 
      RESULT = new Loop(new ForRange(v, r), b, EnumTag.FOR); :}
  | identFields:v AFF expr:e SEMIC
    {: RESULT = new Affect(v, e); :}
  | RETURN expr:e SEMIC
    {: RESULT = new Return(e, null); :}
  | RETURN SEMIC
    {: RESULT = new Return(null, null); :}
  | identFields:i LPAR list:l RPAR SEMIC
    {: RESULT = new ProcedureCall(i, l); :}  
  | error SEMIC
  ;

range ::=
  LBRACKET expr:e1 DDOT expr:e2 RBRACKET {: RESULT = new Range(e1, e2); :}
  | LBRACKET list:l RBRACKET {: RESULT = l; :}
  | LBRACE list:l RBRACE {:RESULT = l; :}
  | identFields:id {: RESULT = id; :}
  ;

list ::=  // used in list affectation and in function call
  list_rec:l {: RESULT = l; :}
  | {: RESULT = new ExprList(null, null); :}
  ;

list_rec ::=
  list_rec:l COMMA expr:e {: RESULT = new ExprList(l, e); :}
  | expr:e {: RESULT = e; :}
  ;

map_of ::=
  LBRACE map_of_list:ml RBRACE
    {: RESULT = ml; :}
  ;

map_of_list ::=
  map_of_list:ml COMMA tuple:t
    {: RESULT = new Tuples(ml, t); :}
  | tuple:t
    {: RESULT = t; :}
  ;
    
tuple ::=
  LPAR expr:key COMMA expr:val RPAR
    {: RESULT = new Tuple(key, val); :}
  ;

expr ::=
	expr:e1 bin_op:op expr:e2 
    {: RESULT = new Operation(e1, e2, op, Verificator.inferType(e1, e2)); :}   // a && b
  | MINUS expr:e 
    {: RESULT = new Operation(null, e, EnumTag.MINUS_U, Verificator.findType(e)); :} %prec MINUS_U  // -a
  | identFields:i LPAR list:l RPAR
    {: RESULT = new FunctionCall(i, l); :} // foo(a, b, c)
  | ARRAY OF type:t LBRACKET expr:e RBRACKET 
    {: RESULT = new ArrayInit(t, e); :}    // array of int[a]
  | variable:v 
    {: RESULT = v; :}
  | identFields:id 
    {: RESULT = id; :} // a.b.foo
  | map_of:ml 
    {: RESULT = ml; :} // {(a,b),(c,d)}
  | LPAR expr:e RPAR 
    {: e.setPriority(true); 
      RESULT = e; :}   // (a)
	;

bin_op ::=
  AND
    {: RESULT = EnumTag.AND; :}
  | OR
    {: RESULT = EnumTag.OR; :}
  | LT
    {: RESULT = EnumTag.LT; :}
  | GT
    {: RESULT = EnumTag.GT; :}
  | LE
    {: RESULT = EnumTag.LE; :}
  | GE
    {: RESULT = EnumTag.GE; :}
  | EQ
    {: RESULT = EnumTag.EQ; :}
  | DIFF
    {: RESULT = EnumTag.DIFF; :}
  | PLUS
    {: RESULT = EnumTag.PLUS; :}
  | MINUS
    {: RESULT = EnumTag.MINUS; :}
  | MULT
    {: RESULT = EnumTag.MULT; :}
  | DIV
    {: RESULT = EnumTag.DIV; :}
  | MOD
    {: RESULT = EnumTag.MOD; :}
  ;

variable ::=
  INTEGER:i
    {: RESULT = new Variable(EnumTag.INTEGER, i, new Type(EnumType.INT)); :}
  | FLOATING:f
    {: RESULT = new Variable(EnumTag.FLOATING, f, new Type(EnumType.FLOAT)); :}
  | STRINGEXP:st
    {: RESULT = new Variable(EnumTag.STRING, st, new Type(EnumType.STRING)); :}
  | CHAREXP:ch
    {: RESULT = new Variable(EnumTag.CHAR, ch, new Type(EnumType.CHAR)); :}
  | BOOL:b
    {: RESULT = new Variable(EnumTag.BOOLEAN, b, new Type(EnumType.BOOLEAN)); :}
  ;

ident ::=
	IDENTIFIER:id opt_slot:slot
    {: RESULT = new Variable(EnumTag.IDENT, id, slot); :}
	;

opt_slot ::=
  LBRACKET expr:e RBRACKET {: RESULT = e; :}
  | {: RESULT = null; :}
  ;


identFields ::=
  identFields:idfs DOT ident:id {: RESULT = new SubField(idfs, id); :}
  | ident:id {: RESULT = id; :}
  ;
