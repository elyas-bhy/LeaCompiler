/* The following code was generated by JFlex 1.4.3 on 20/11/12 16:38 */

package org.gen;



import java_cup.runtime.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/11/12 16:38 from the specification file
 * <tt>/autofs/netapp/travail/rherbert/M1/COMP/Project/code/scanner/scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_COMMENT = 4;
  public static final int MONO_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\1\3\22\0\1\5\1\32\1\7"+
    "\3\0\1\25\1\10\1\17\1\20\1\15\1\34\1\35\1\14\1\12"+
    "\1\16\12\6\1\33\1\36\1\27\1\31\1\30\2\0\4\1\1\13"+
    "\1\65\5\1\1\11\7\1\1\64\6\1\1\23\1\0\1\24\1\0"+
    "\1\2\1\0\1\54\1\53\1\55\1\52\1\43\1\40\1\56\1\42"+
    "\1\37\2\1\1\45\1\60\1\44\1\50\1\61\1\1\1\51\1\46"+
    "\1\41\1\62\1\63\1\47\1\1\1\57\1\1\1\21\1\26\1\22"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\1\1\20\1\21\1\22\1\1\1\23\1\24"+
    "\1\25\1\26\22\2\1\27\2\30\2\27\1\31\2\0"+
    "\1\32\1\0\1\33\1\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\11\2\1\46"+
    "\1\2\1\47\10\2\2\31\1\0\1\33\1\50\1\2"+
    "\1\51\5\2\1\52\6\2\1\53\6\2\1\54\1\55"+
    "\1\56\5\2\1\57\1\2\1\60\1\2\1\61\1\62"+
    "\1\2\1\63\3\2\1\64\2\2\1\65\1\2\1\66"+
    "\1\2\1\67\1\70\1\71\1\72\3\2\1\73\1\2"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\242\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\242\0\242\0\u021c\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\242\0\u032a\0\u0360\0\242\0\242\0\242\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\242\0\u0762\0\242\0\u0798\0\u07ce\0\u0804\0\u083a\0\u017a"+
    "\0\242\0\u0870\0\u0870\0\u08a6\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\242\0\242\0\330\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\330"+
    "\0\u0af8\0\330\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\242\0\u0cde\0\u0d14\0\242\0\330\0\u0d4a"+
    "\0\330\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\330\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\330\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\330\0\330\0\330\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\330\0\u1224\0\330\0\u125a"+
    "\0\330\0\330\0\u1290\0\330\0\u12c6\0\u12fc\0\u1332\0\330"+
    "\0\u1368\0\u139e\0\330\0\u13d4\0\330\0\u140a\0\330\0\330"+
    "\0\330\0\330\0\u1440\0\u1476\0\u14ac\0\330\0\u14e2\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\2\7\1\10\1\11\1\12"+
    "\1\5\1\13\1\5\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\5\1\42\1\5\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\5\1\54\1\55"+
    "\1\5\1\56\1\57\1\60\3\61\1\62\1\63\64\61"+
    "\1\64\11\61\1\65\50\61\67\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\27\5\4\0\1\7"+
    "\67\0\1\10\3\0\1\66\1\67\27\0\1\67\22\0"+
    "\7\70\1\71\56\70\4\72\1\0\3\72\1\73\55\72"+
    "\6\0\1\74\74\0\1\75\1\76\74\0\1\77\66\0"+
    "\1\100\70\0\1\101\65\0\1\102\65\0\1\103\65\0"+
    "\1\104\35\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\1\5\1\105\3\5\1\106\21\5\1\0"+
    "\2\5\3\0\1\5\2\0\1\5\1\0\1\5\23\0"+
    "\6\5\1\107\2\5\1\110\11\5\1\111\3\5\1\0"+
    "\2\5\3\0\1\5\2\0\1\5\1\0\1\5\23\0"+
    "\3\5\1\112\23\5\1\0\2\5\3\0\1\5\2\0"+
    "\1\5\1\0\1\5\23\0\6\5\1\113\20\5\1\0"+
    "\2\5\3\0\1\5\2\0\1\5\1\0\1\5\23\0"+
    "\1\114\26\5\1\0\2\5\3\0\1\5\2\0\1\5"+
    "\1\0\1\5\23\0\2\5\1\115\1\5\1\116\22\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\3\5\1\117\23\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\1\5\1\120\25\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\4\5\1\121\22\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\11\5\1\122\15\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\11\5\1\123\15\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\12\5\1\124\14\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\3\5\1\125\23\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\15\5\1\126\11\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\12\5\1\127\14\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\11\5\1\130\15\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\12\5\1\131\14\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\15\5\1\132\11\5"+
    "\4\0\1\63\65\0\1\61\77\0\1\63\55\0\1\74"+
    "\2\0\1\133\26\0\1\133\4\0\1\133\17\0\1\133"+
    "\6\0\1\134\5\0\1\135\61\0\1\136\63\0\1\74"+
    "\2\0\1\133\1\0\1\67\24\0\1\133\2\0\1\67"+
    "\1\0\1\133\17\0\1\133\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\2\5\1\137\24\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\11\5\1\140\15\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\12\5\1\141\14\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\5\5\1\142\21\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\4\5\1\143\22\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\7\5\1\144\17\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\7\5\1\145\17\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\12\5\1\146\14\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\2\5\1\147\24\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\1\150\26\5\1\0\2\5\3\0\1\5\2\0"+
    "\1\5\1\0\1\5\23\0\2\5\1\151\17\5\1\152"+
    "\4\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\11\5\1\153\15\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\12\5\1\154"+
    "\14\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\15\5\1\155\11\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\22\5\1\156"+
    "\4\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\11\5\1\157\15\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\1\160\26\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\23\5\1\161\3\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\6\5\1\162\20\5"+
    "\6\0\1\134\2\0\1\133\26\0\1\133\4\0\1\133"+
    "\17\0\1\133\6\0\1\134\60\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\15\5\1\163\11\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\16\5\1\164\10\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\5\5\1\165\21\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\4\5\1\166\22\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\2\5\1\167\24\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\1\170\22\5\1\171\3\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\6\5\1\172"+
    "\20\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\23\5\1\173\3\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\4\5\1\174"+
    "\22\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\6\5\1\175\20\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\15\5\1\176"+
    "\11\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\12\5\1\177\14\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\16\5\1\200"+
    "\10\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\13\5\1\201\13\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\4\5\1\202"+
    "\22\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\7\5\1\203\17\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\2\5\1\204"+
    "\24\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\2\5\1\205\24\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\5\5\1\206"+
    "\21\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\16\5\1\207\10\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\4\5\1\210"+
    "\22\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\12\5\1\211\14\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\15\5\1\212"+
    "\11\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\20\5\1\213\6\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\4\5\1\214"+
    "\22\5\1\0\2\5\3\0\1\5\2\0\1\5\1\0"+
    "\1\5\23\0\4\5\1\215\22\5\1\0\2\5\3\0"+
    "\1\5\2\0\1\5\1\0\1\5\23\0\1\216\26\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\17\5\1\217\7\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\2\5\1\220\24\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\5\5\1\221\21\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\2\5\1\222\24\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\13\5\1\223\13\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\11\5\1\224\15\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\23\5\1\225\3\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\5\5\1\226\21\5"+
    "\1\0\2\5\3\0\1\5\2\0\1\5\1\0\1\5"+
    "\23\0\12\5\1\227\14\5\1\0\2\5\3\0\1\5"+
    "\2\0\1\5\1\0\1\5\23\0\4\5\1\230\22\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\4\1\2\11\1\1\6\11"+
    "\4\1\1\11\2\1\3\11\22\1\1\11\1\1\1\11"+
    "\3\1\2\0\1\11\1\0\2\1\10\11\26\1\1\11"+
    "\1\1\1\0\1\11\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private Symbol symbol (int type) {
    return new Symbol (type, yyline, yycolumn);
}

private Symbol symbol (int type, Object value) {
    return new Symbol (type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.INT);
          }
        case 61: break;
        case 1: 
          { /* ignore */
          }
        case 62: break;
        case 27: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.CHAREXP, yytext());
          }
        case 63: break;
        case 43: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.MAP);
          }
        case 64: break;
        case 12: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.LBRACE);
          }
        case 65: break;
        case 51: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.FLOAT);
          }
        case 66: break;
        case 30: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.AND);
          }
        case 67: break;
        case 59: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.FUNCTION);
          }
        case 68: break;
        case 47: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.BOOLEAN);
          }
        case 69: break;
        case 9: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.DIV);
          }
        case 70: break;
        case 3: 
          { /*System.out.print(yytext());*/  /* ignore */
          }
        case 71: break;
        case 7: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.MINUS);
          }
        case 72: break;
        case 5: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.DQUOTE);
          }
        case 73: break;
        case 57: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.RETURN);
          }
        case 74: break;
        case 39: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.DO);
          }
        case 75: break;
        case 22: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.SEMIC);
          }
        case 76: break;
        case 21: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.COMMA);
          }
        case 77: break;
        case 36: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.IF);
          }
        case 78: break;
        case 26: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.STRINGEXP, yytext());
          }
        case 79: break;
        case 54: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.FALSE);
          }
        case 80: break;
        case 10: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.LPAR);
          }
        case 81: break;
        case 28: 
          { yybegin(MULTI_COMMENT);
          }
        case 82: break;
        case 4: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.INTEGER, yytext());
          }
        case 83: break;
        case 24: 
          { yybegin(YYINITIAL);
          }
        case 84: break;
        case 37: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.IN);
          }
        case 85: break;
        case 31: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.OR);
          }
        case 86: break;
        case 18: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.EQ);
          }
        case 87: break;
        case 56: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.STRUCT);
          }
        case 88: break;
        case 46: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.LIST);
          }
        case 89: break;
        case 14: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.LBRACKET);
          }
        case 90: break;
        case 41: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.FOR);
          }
        case 91: break;
        case 11: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.RPAR);
          }
        case 92: break;
        case 2: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.IDENTIFIER, yytext());
          }
        case 93: break;
        case 13: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.RBRACE);
          }
        case 94: break;
        case 35: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.AFF);
          }
        case 95: break;
        case 60: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.PROCEDURE);
          }
        case 96: break;
        case 42: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.SET);
          }
        case 97: break;
        case 34: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.DIFF);
          }
        case 98: break;
        case 20: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.PLUS);
          }
        case 99: break;
        case 33: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.GE);
          }
        case 100: break;
        case 25: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.FLOATING, yytext());
          }
        case 101: break;
        case 15: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.RBRACKET);
          }
        case 102: break;
        case 32: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.LE);
          }
        case 103: break;
        case 50: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.TRUE);
          }
        case 104: break;
        case 49: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.VOID);
          }
        case 105: break;
        case 55: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.STRING);
          }
        case 106: break;
        case 45: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.ELSE);
          }
        case 107: break;
        case 29: 
          { yybegin(MONO_COMMENT);
          }
        case 108: break;
        case 53: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.ARRAY);
          }
        case 109: break;
        case 38: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.OF);
          }
        case 110: break;
        case 8: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.MULT);
          }
        case 111: break;
        case 6: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.DOT);
          }
        case 112: break;
        case 44: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.THEN);
          }
        case 113: break;
        case 58: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.REPEAT);
          }
        case 114: break;
        case 19: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.COLON);
          }
        case 115: break;
        case 17: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.GT);
          }
        case 116: break;
        case 48: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.CHAR);
          }
        case 117: break;
        case 52: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.WHILE);
          }
        case 118: break;
        case 16: 
          { /*System.out.print(yytext());*/  return symbol(MySymbol.LT);
          }
        case 119: break;
        case 23: 
          { 
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(MySymbol.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
